//output directory: smallv5_2.out/
Nx := 410
Ny := 110
Nz := 25

setGridSize(Nx, Ny, Nz)
setCellSize(5e-9, 4e-9, 4e-9)

Aex = 13e-12
Xi = 0.1

alpha = 0.02
angle := 360
ydim := 40e-9
zdim := 40e-9

translation := -27.5e-9
bigR := 20e-9
currentdensity := 3e12

timestep := 20e-12
totaltime := 5000e-12

wireDW := cuboid(2000e-9, ydim, zdim).transl(0, 0, 0)
wireSwitch := cuboid(75e-9, 380e-9, 5e-9).RotZ((360-angle)*pi/180).transl(410e-9, 0, translation)
wireSwitch_left := cuboid(75e-9, 380e-9, 5e-9).RotZ((360-angle)*pi/180).transl(-410e-9, 0, translation)

bottom := wireSwitch.add(wireSwitch_left)
setGeom(wireDW.add(bottom))
saveas(geom, "WireCross")

defRegion(1, wireDW)
defRegion(2, wireSwitch)
defRegion(3, cuboid(40e-9, ydim, zdim).transl(-980e-9, 0, 0))
defRegion(4, cuboid(40e-9, ydim, zdim).transl(980e-9, 0, 0))
defRegion(5, wireSwitch_left)

m.setRegion(1, twodomain(1, 0, 0, 0, 0, -1, -1, 0, 0))
m.setRegion(2, uniform(sin(-angle*pi/180), -cos(angle*pi/180), 0))
m.setRegion(3, uniform(1, 0, 0))
m.setRegion(4, uniform(-1, 0, 0))
m.setRegion(5, uniform(sin(-angle*pi/180), -cos(angle*pi/180), 0))

Msat.setRegion(1, 800e3)
Msat.setRegion(2, 800e3)
Msat.setRegion(3, 800e3)
Msat.setRegion(4, 800e3)
Msat.setRegion(5, 800e3)

frozenspins.setRegion(3, 1)
frozenspins.setRegion(4, 1)

BoundaryRegion := 1
MagLeft := 1
MagRight := -1
ext_rmSurfaceCharge(BoundaryRegion, MagLeft, MagRight)

saveas(m, "Init")

Minimize()
autosave(m, timestep)
tableadd(m.Region(2))
tableadd(E_anis)
tableadd(E_demag)
tableadd(E_exch)
tableadd(E_therm)
tableadd(E_total)
tableadd(E_Zeeman)
tableautosave(timestep)
pol.setRegion(1, 0.56)

J.setRegion(1, vector(-1*currentdensity, 0, 0))
maskout_1 := newVectorMask(Nx, Ny, Nz)
for i := 0; i < Nx; i++ {
	for j := 0; j < 50; j++ {
		for k := 0; k < Nz; k++ {
			r := index2coord(i, j, k)
			x := r.X()
			y := r.Y()
			z := r.Z()
			d := sqrt(z*z + y*y)
			B := (mu0 * 1 * currentdensity * ydim * zdim) / (2 * pi * d)
			By := (-1 * B * z) / d
			Bz := (B * y) / d
			maskout_1.setVector(i, j, k, vector(0, By, Bz))
		}
	}
}

maskout_2 := newVectorMask(Nx, Ny, Nz)
for i := 0; i < Nx; i++ {
	for j := 59; j < Ny; j++ {
		for k := 0; k < Nz; k++ {
			r := index2coord(i, j, k)
			x := r.X()
			y := r.Y()
			z := r.Z()
			d := sqrt(z*z + y*y)
			B := (mu0 * 1 * currentdensity * ydim * zdim) / (2 * pi * d)
			By := (-1 * B * z) / d
			Bz := (B * y) / d
			maskout_2.setVector(i, j, k, vector(0, By, Bz))
		}
	}
}

maskout_3 := newVectorMask(Nx, Ny, Nz)
for i := 0; i < Nx; i++ {
	for j := 50; j < 59; j++ {
		for k := 17; k < Nz; k++ {
			r := index2coord(i, j, k)
			x := r.X()
			y := r.Y()
			z := r.Z()
			d := sqrt(z*z + y*y)
			B := (mu0 * 1 * currentdensity * ydim * zdim) / (2 * pi * d)
			By := (-1 * B * z) / d
			Bz := (B * y) / d
			maskout_3.setVector(i, j, k, vector(0, By, Bz))
		}
	}
}

maskout_4 := newVectorMask(Nx, Ny, Nz)
for i := 0; i < Nx; i++ {
	for j := 50; j < 59; j++ {
		for k := 0; k < 8; k++ {
			r := index2coord(i, j, k)
			x := r.X()
			y := r.Y()
			z := r.Z()
			d := sqrt(z*z + y*y)
			B := (mu0 * 1 * currentdensity * ydim * zdim) / (2 * pi * d)
			By := (-1 * B * z) / d
			Bz := (B * y) / d
			maskout_4.setVector(i, j, k, vector(0, By, Bz))
		}
	}
}

maskin := newVectorMask(Nx, Ny, Nz)
for i := 0; i < Nx; i++ {
	for j := 49; j < 60; j++ {
		for k := 7; k < 18; k++ {
			r := index2coord(i, j, k)
			x := r.X()
			y := r.Y()
			z := r.Z()
			d := sqrt(z*z + y*y)
			B := (mu0 * 1 * currentdensity * ydim * zdim * d) / (2 * pi * bigR * bigR)
			By := (-1 * B * z) / d
			Bz := (B * y) / d
			maskin.setVector(i, j, k, vector(0, By, Bz))
		}
	}
}

B_ext.add(maskout_1, 1)
B_ext.add(maskout_2, 1)
B_ext.add(maskout_3, 1)
B_ext.add(maskout_4, 1)
B_ext.add(maskin, 1)
Run(totaltime)
